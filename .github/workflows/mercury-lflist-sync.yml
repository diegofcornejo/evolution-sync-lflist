name: mercury-lflist-sync

on:
  workflow_dispatch:

jobs:
  sync:
    name: check-change
    runs-on: ubuntu-latest
    outputs:
      newCommitsInSyncRepo: ${{ steps.check.outputs.newCommitsInSyncRepo }}
    steps:
      - uses: poll-github-repo/action@v1
        id: check
        with:
          repo-to-sync: diegofcornejo/YGOMobile-cn-ko-en
          path-to-sync: mobile/assets/data/conf/lflist.conf
          cache-path: .sync/mercury-lflist-sync
          tracking-issue-label: upstream-mercury-lflist
          tracking-issue-title: "Update on {{ path }}: {{ sha-short }}"
          tracking-issue-body: |
            New commit in diegofcornejo/YGOMobile-cn-ko-en:

            **{{ message }}** [link]({{ url }})
          token: ${{ secrets.GH_TOKEN }}
          yes-create-issues: true

      - name: Log new commits
        if: steps.check.outputs.newCommitsInSyncRepo == 'true'
        run: echo "There are new commits in the sync repository."

  download:
    name: Download LFLIST
    needs: sync
    runs-on: ubuntu-latest
    if: needs.sync.outputs.newCommitsInSyncRepo == 'true'
    steps:
      - name: Create directories
        run: |
          mkdir -p projectignis
          mkdir -p koishi

      - name: Clone LFLists repository from ProjectIgnis
        run: |
          git clone https://github.com/ProjectIgnis/LFLists projectignis

      - name: Download lflist.conf from YGOMobile
        run: |
          curl -L https://raw.githubusercontent.com/diegofcornejo/YGOMobile-cn-ko-en/master/mobile/assets/data/conf/lflist.conf -o koishi/lflist.conf

      - name: Split lflist.conf into multiple files
        run: |
          year=$(date +"%Y")
          file_path="koishi/lflist.conf"
          output_dir="koishi"
          awk -v year="$year" -v output_dir="$output_dir" '
          /^!/{if (out) close(out); out=""; if ($1 ~ "^!" year) {filename=substr($0, 2) ".KS.lflist.conf"; out=output_dir "/" filename; print "#[" substr($0, 2) "]\n" $0 > out; next}}
          out {print >> out}' $file_path

      - name: List files in koishi directory
        run: ls -l koishi

      - name: Check content of banlists 2024.7
        run: cat koishi/2024.7.KS.lflist.conf

      - name: Remove lflist.conf
        run: rm koishi/lflist.conf

      - name: Upload Koishi artifacts
        uses: actions/upload-artifact@v4
        with:
          name: koishi-files
          path: koishi/

      - name: Upload Project Ignis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: projectignis-files
          path: projectignis/
  
  process:
    name: Process LFLIST
    needs: download
    runs-on: ubuntu-latest
    steps:
      - name: Download koishi artifacts
        uses: actions/download-artifact@v4
        with:
          name: koishi-files
          path: koishi/

      - name: Download projectignis artifacts
        uses: actions/download-artifact@v4
        with:
          name: projectignis-files
          path: projectignis/

      - name: Create necessary directories
        run: mkdir -p new

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Process banlists and generate hashes
        run: |
          cat << 'EOF' > process_banlists.js
          const fs = require('fs');
          const path = require('path');

          class BanList {
            constructor() {
              this.forbidden = [];
              this.limited = [];
              this.semiLimited = [];
              this.all = [];
              this._hash = 0x7dfcee6a;
              this.name = null;
            }

            add(cardId, quantity) {
              if (isNaN(cardId)) {
                return;
              }

              if (quantity === 0) {
                this.forbidden.push(cardId);
              }

              if (quantity === 1) {
                this.limited.push(cardId);
              }

              if (quantity === 2) {
                this.semiLimited.push(cardId);
              }

              if (quantity === 3) {
                this.all.push(cardId);
              }

              this._hash =
                this._hash ^
                ((((cardId >>> 0) << 18) >> 0) | (cardId >> 14)) ^
                ((((cardId >>> 0) << (27 + quantity)) >>> 0) | (cardId >>> (5 - quantity)));
            }

            setName(name) {
              this.name = name;
            }

            whileListed() {
              // Implement any necessary logic for whileListed
            }

            load(filePath) {
              const lines = fs.readFileSync(filePath, "utf-8").split("\n");
              for (const line of lines) {
                if (!line) {
                  continue;
                }

                if (line.startsWith("$whitelist")) {
                  this.whileListed();
                }

                if (line.startsWith("#")) {
                  continue;
                }

                if (line.startsWith("!")) {
                  this.setName(line.substring(1).trim());
                }

                if (!line.includes(" ")) {
                  continue;
                }

                if (this.name === null) {
                  continue;
                }

                const [cardId, quantity] = line.split(" ");
                this.add(Number(cardId), Number(quantity));
              }
            }

            updateFile(filePath) {
              const lines = fs.readFileSync(filePath, "utf-8").split("\n");
              const updatedLines = lines.map(line => {
                if (line.startsWith("#[")) {
                  return line.replace(/#\[([^\]]+)\]/, '#[$1 KS]');
                } else if (line.startsWith("!")) {
                  return line.replace(/^!(.+)$/, '!$1 KS');
                }
                return line;
              });
              fs.writeFileSync(filePath, updatedLines.join("\n"), "utf-8");
            }
          }

          function processBanlists(dir) {
            const files = fs.readdirSync(dir);
            const hashes = [];

            files.forEach(file => {
              const filePath = path.join(dir, file);
              if (fs.lstatSync(filePath).isFile() && file.endsWith('.conf')) {
                const banList = new BanList();
                banList.load(filePath);
                console.log(`Path: ${filePath}`);
                console.log(`Banlist: ${banList.name}, Hash: ${banList._hash}`);
                hashes.push({ hash: banList._hash, file: file });
              }
            });

            return hashes;
          }

          const projectignisDir = 'projectignis';
          const koishiDir = 'koishi';

          const projectignisHashes = processBanlists(projectignisDir);
          const koishiHashes = processBanlists(koishiDir);

          const newFilesDir = 'new';

          koishiHashes.forEach(({ hash, file }) => {
            if (!projectignisHashes.some(item => item.hash === hash)) {
              const filePath = path.join(koishiDir, file);
              const newFilePath = path.join(newFilesDir, file);

              // Copy the file to the new directory
              fs.copyFileSync(filePath, newFilePath);

              // Update the copied file
              const banList = new BanList();
              banList.updateFile(newFilePath);
            }
          });
          EOF

          # Run the Node.js script
          node process_banlists.js

          # Clean up the generated JavaScript file
          rm process_banlists.js

      - name: List files in new directory
        run: ls -l new

      - name: Check content of new 2024.7
        run: cat new/2024.7.KS.lflist.conf

      - name: Upload new artifacts
        uses: actions/upload-artifact@v4
        with:
          name: new-files
          path: new/

  update:
    name: Update LFLIST
    needs: process
    runs-on: ubuntu-latest
    steps:
      - name: Download new artifacts
        uses: actions/download-artifact@v4
        with:
          name: new-files
          path: new/

      - name: Commit and push changes
        run: |
          # Configuration variables
          REPO_URL="https://github.com/diegofcornejo/evolution-server-lflist.git"
          BRANCH="main"
          ORIGIN_REPO="diegofcornejo/YGOMobile-cn-ko-en"
          FILE_PATH="mobile/assets/data/conf/lflist.conf"
          COMMIT_MESSAGE="Update banlists with new KS lists"

          # Get the SHA of the latest commit that modified the target file from the origin repository
          LATEST_COMMIT_SHA=$(curl -s "https://api.github.com/repos/$ORIGIN_REPO/commits?path=$FILE_PATH&per_page=1" | jq -r '.[0].sha')

          # Check if the SHA was successfully retrieved
          if [ "$LATEST_COMMIT_SHA" == "null" ] || [ -z "$LATEST_COMMIT_SHA" ]; then
            echo "Error: Unable to retrieve the latest commit SHA for $FILE_PATH from $ORIGIN_REPO."
            exit 1
          fi

          COMMIT_MESSAGE="$COMMIT_MESSAGE - based on $LATEST_COMMIT_SHA"
          echo "Commit message: $COMMIT_MESSAGE"

          # Ensure the new directory exists and has files
          if [ -d "new" ] && [ "$(ls -A new)" ]; then
            # Clone the remote repository
            git clone $REPO_URL repo

            # Copy the new files to the cloned repository
            cp -R new/* repo/

            # Change to the repository directory
            cd repo

            # Set git user configuration
            git config user.name "Evolution Bot"
            git config user.email "bot@evolutionygo.com"

            # Add new files to the repository
            git add .

            # Commit the changes
            git commit -m "$COMMIT_MESSAGE"

            # Pull the latest changes to avoid conflicts
            git pull origin $BRANCH --rebase

            # Push the changes to the remote repository
            git push origin $BRANCH

          else
            echo "No files to commit in the 'new' directory."
          fi
